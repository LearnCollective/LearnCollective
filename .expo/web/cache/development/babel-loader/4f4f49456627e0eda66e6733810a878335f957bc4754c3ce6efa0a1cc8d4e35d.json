{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport react, { useState } from \"react\";\nimport photo from \"../assets/sora.jpg\";\nimport photo2 from \"../assets/back2.png\";\nimport { signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase/firebase_config\";\nimport { CheckBox, Input } from 'react-native-elements';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { globalstyles } from \"../styles/global\";\nimport { border, borderBottom } from \"styled-system\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar loginValidationSchema = yup.object().shape({\n  email: yup.string().email('Please enter valid email').required('Email Address is required'),\n  password: yup.string().min(8, function (_ref) {\n    var min = _ref.min;\n    return \"password must be at least \" + min + \"characters \";\n  }).required('password is required').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\")\n});\nexport default function forgetpassword(_ref2) {\n  var navigation = _ref2.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var handleResetPassword = function handleResetPassword() {\n    handlePasswordReset(values.email);\n  };\n  return _jsx(Formik, {\n    initialValues: {\n      email: ''\n    },\n    validateOnMount: true,\n    onSubmit: function onSubmit(values) {\n      function handleFormSubmit(_x) {\n        return _handleFormSubmit.apply(this, arguments);\n      }\n      function _handleFormSubmit() {\n        _handleFormSubmit = _asyncToGenerator(function* (values) {\n          if (values.email == '') {\n            showMessage({\n              message: 'Lütfen Alanları Doldurunuz.',\n              type: \"danger\"\n            });\n          } else {\n            yield auth().sendPasswordResetEmail(values.email).then(function () {\n              showMessage({\n                message: 'E-mailinizi kontrol ediniz.',\n                type: \"success\"\n              });\n              console.log('YES');\n              navigation.goBack();\n            }).catch(function (e) {\n              showMessage({\n                message: authErrorMessageParser(e),\n                type: \"danger\"\n              });\n              console.log('no');\n            });\n          }\n        });\n        return _handleFormSubmit.apply(this, arguments);\n      }\n    },\n    validationSchema: loginValidationSchema,\n    children: function children(_ref3) {\n      var handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        values = _ref3.values,\n        touched = _ref3.touched,\n        errors = _ref3.errors,\n        isValid = _ref3.isValid;\n      return _jsx(ImageBackground, {\n        source: require(\"../assets/back2.png\"),\n        style: {\n          height: Dimensions.get('window').height\n        },\n        children: _jsxs(View, {\n          style: {\n            flex: 1,\n            padding: 24\n          },\n          children: [_jsx(Text, {\n            style: {\n              textAlign: 'center',\n              marginTop: 200,\n              fontSize: 15,\n              fontWeight: 'bold',\n              fontStyle: 'italic',\n              color: 'white',\n              marginBottom: 30\n            },\n            children: \"Type Your Email To Reset Password \"\n          }), _jsxs(View, {\n            floatingLable: true,\n            style: {\n              borderColor: '#4632A1'\n            },\n            children: [_jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Email\"\n            }), _jsxs(View, {\n              style: {\n                flexDirection: 'row',\n                alignItems: 'stretch'\n              },\n              children: [_jsx(Input, {\n                style: {\n                  color: 'white'\n                },\n                onChangeText: handleChange('email'),\n                onBlur: handleBlur('email'),\n                value: values.email\n              }), _jsx(Icon, {\n                name: !errors.email ? 'check' : 'close',\n                style: {\n                  color: !errors.email ? '#4632A1' : 'red'\n                }\n              })]\n            })]\n          }), _jsx(Button, {\n            title: \"Reset Password\",\n            onPress: handleSubmit\n          })]\n        })\n      });\n    }\n  });\n}","map":{"version":3,"names":["react","useState","photo","photo2","signOut","auth","CheckBox","Input","yup","Formik","Icon","StyleSheet","TouchableOpacity","Button","Text","View","TextInput","Image","FlatList","ImageBackground","ScrollView","Dimensions","globalstyles","border","borderBottom","jsx","_jsx","jsxs","_jsxs","loginValidationSchema","object","shape","email","string","required","password","min","_ref","matches","forgetpassword","_ref2","navigation","_useState","_useState2","_slicedToArray","setEmail","handleResetPassword","handlePasswordReset","values","initialValues","validateOnMount","onSubmit","handleFormSubmit","_x","_handleFormSubmit","apply","arguments","_asyncToGenerator","showMessage","message","type","sendPasswordResetEmail","then","console","log","goBack","catch","e","authErrorMessageParser","validationSchema","children","_ref3","handleChange","handleBlur","handleSubmit","touched","errors","isValid","source","require","style","height","get","flex","padding","textAlign","marginTop","fontSize","fontWeight","fontStyle","color","marginBottom","floatingLable","borderColor","flexDirection","alignItems","onChangeText","onBlur","value","name","title","onPress"],"sources":["/home/ahmed/Desktop/project303/LearnCollective/screens/Forgetpassword.js"],"sourcesContent":["import react ,{useState}from \"react\";\nimport photo from '../assets/sora.jpg'\nimport photo2 from '../assets/back2.png'\nimport {signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase/firebase_config\";\nimport { CheckBox, Input } from 'react-native-elements';\nimport * as yup from 'yup'\nimport { Formik } from 'formik';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport { StyleSheet, \n    TouchableOpacity,\n    Button,\n    Text,\n    View,\n   TextInput ,\n   Image,\n   FlatList,\n   ImageBackground ,\n   ScrollView,\n   Dimensions\n } from 'react-native';\nimport { globalstyles } from \"../styles/global\";\nimport { border, borderBottom } from \"styled-system\";\nconst loginValidationSchema = yup.object().shape({\n  email: yup.string().email('Please enter valid email').required('Email Address is required'),\n  password: yup.string().min(8, ({ min }) => `password must be at least ${min}characters `)\n    .required('password is required').matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"\n    ),\n});\n\nexport default function forgetpassword ({navigation}){\n  const [email, setEmail] = useState(''); \n  const handleResetPassword = () => {\n    handlePasswordReset(values.email);\n  };\n \n \nreturn(\n  \n  <Formik\n\n  initialValues={{ email: ''}}\n  validateOnMount={true}\n  onSubmit={values => {\n    ////call sign In here\n    async function handleFormSubmit(values){\n      if(values.email == ''){\n        showMessage({\n          message: 'Lütfen Alanları Doldurunuz.',\n          type: \"danger\",\n        });\n      }\n      else{\n          await auth().sendPasswordResetEmail(values.email)\n              .then(()=> {\n                  showMessage({\n                      message: 'E-mailinizi kontrol ediniz.',\n                      type: \"success\",\n                    });\n                    console.log('YES');\n                  navigation.goBack();\n              }).catch(function (e) {\n                  showMessage({\n                      message: authErrorMessageParser(e),\n                      type: \"danger\",\n                      \n                    });console.log('no');\n              })\n            }\n          }\n   \n    \n  }}\n  validationSchema={loginValidationSchema}\n\n\n>\n{({ handleChange, handleBlur, handleSubmit, values, touched, errors, isValid }) => (\n  <ImageBackground\n  source={require('../assets/back2.png')}\n  style={{\n    height: Dimensions.get('window').height \n  }}>\n  <View style={{flex:1,padding:24}}>\n    <Text style={{textAlign:'center',marginTop:200 ,\n     fontSize:15,fontWeight:'bold',\n     fontStyle:'italic',color:'white',marginBottom:30}}>Type Your Email To Reset Password </Text>\n    <View floatingLable style={{ borderColor: '#4632A1'}}>\n                  <Text style={{color:'white'}}>Email</Text>\n                  <View style={{ flexDirection: 'row', alignItems: 'stretch' }}>\n\n                    <Input style={{color:'white'}} onChangeText={handleChange('email')}\n                      onBlur={handleBlur('email')} value={values.email}\n                       />\n\n                    <Icon name={!errors.email ? 'check' : 'close'} style={{ color: !errors.email ? '#4632A1' : 'red' }} />\n                  </View>\n                </View>\n                <Button title=\"Reset Password\" onPress={handleSubmit}></Button>\n  </View>\n  </ImageBackground>\n  )}\n  \n\n  </Formik>\n);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}